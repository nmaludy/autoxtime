name: static-analysis

on:
  push:
    branches: ['*']
    tags:
      - v*
  pull_request:
    type: [opened, reopened, edited]
  schedule:
    # run every night at midnight
    - cron:  '0 0 * * *'

jobs:
  static_analysis_check:
    name: 'static analysis - ${{ matrix.test_name_pretty }}'
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            qt_version: '5.12.2'
            apt_packages: >-
             mesa-common-dev libglu1-mesa-dev
             uwsgi uuid-dev libcap-dev libzmq3-dev libpwquality-dev libmemcached-dev libjemalloc-dev
             cppcheck
            test_name: "cppcheck"
            test_name_pretty: "cppcheck"
          - os: ubuntu-latest
            qt_version: '5.12.2'
            apt_packages:  >-
             mesa-common-dev libglu1-mesa-dev
             uwsgi uuid-dev libcap-dev libzmq3-dev libpwquality-dev libmemcached-dev libjemalloc-dev
             clang-tools
            test_name: "clang-tidy"
            test_name_pretty: "clang tidy"
          - os: ubuntu-latest
            qt_version: '5.12.2'
            apt_packages:  >-
             mesa-common-dev libglu1-mesa-dev
             uwsgi uuid-dev libcap-dev libzmq3-dev libpwquality-dev libmemcached-dev libjemalloc-dev
             iwyu
            test_name: "clang-tidy"
            test_name_pretty: "include what you use"
          - os: ubuntu-latest
            qt_version: '5.12.2'
            apt_packages:  >-
             mesa-common-dev libglu1-mesa-dev
             uwsgi uuid-dev libcap-dev libzmq3-dev libpwquality-dev libmemcached-dev libjemalloc-dev
            test_name: "lwyu"
            test_name_pretty: "link what you use"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt_version }}
      - name: Cache External Cutelyst
        id: cache-external-cutelyst
        uses: actions/cache@v2
        with:
          path: |
            build/external-prefix/src/external_cutelyst
            build/external-prefix/src/external_cutelyst-build
            build/external-prefix/src/external_cutelyst-stamp
          key: ${{ runner.os }}-external-cutelyst-${{ hashFiles('cmake/external_cutelyst.cmake') }}
      - name: Cache External Grantlee
        id: cache-external-grantlee
        uses: actions/cache@v2
        with:
          path: |
            build/external-prefix/src/external_grantlee
            build/external-prefix/src/external_grantlee-build
            build/external-prefix/src/external_grantlee-stamp
          key: ${{ runner.os }}-external-grantlee-${{ hashFiles('cmake/external_grantlee.cmake') }}
      - name: Cache External Rapidcsv
        id: cache-external-rapidcsv
        uses: actions/cache@v2
        with:
          path: |
            build/external-prefix/src/external_rapidcsv
            build/external-prefix/src/external_rapidcsv-build
            build/external-prefix/src/external_rapidcsv-stamp
          key: ${{ runner.os }}-external-rapidcsv-${{ hashFiles('cmake/external_rapidcsv.cmake') }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          setup-python: '${{ !steps.cache-qt.outputs.cache-hit }}'
          install-deps: '${{ !steps.cache-qt.outputs.cache-hit }}'
      - name: Install packages required for testing
        if: ${{ matrix.apt_packages }}
        run: |
          sudo apt-get -y install ${{ matrix.apt_packages }}
      - name: CMake Setup
        run: |
          cmake -S . -B build -DTEST_NAME=${{ matrix.test_name }}
      - name: CMake Build/Test
        run: |
          cmake --build build

  clang-static-analyzer:
    name: 'static analysis - clang static analyzer'
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            qt_version: '5.12.2'
            apt_packages: 'mesa-common-dev libglu1-mesa-dev clang-tools'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt_version }}
      - name: Cache External Cutelyst
        id: cache-external-cutelyst
        uses: actions/cache@v2
        with:
          path: |
            build/external-prefix/src/external_cutelyst
            build/external-prefix/src/external_cutelyst-build
            build/external-prefix/src/external_cutelyst-stamp
          key: ${{ runner.os }}-external-cutelyst-${{ hashFiles('cmake/external_cutelyst.cmake') }}
      - name: Cache External Grantlee
        id: cache-external-grantlee
        uses: actions/cache@v2
        with:
          path: |
            build/external-prefix/src/external_grantlee
            build/external-prefix/src/external_grantlee-build
            build/external-prefix/src/external_grantlee-stamp
          key: ${{ runner.os }}-external-grantlee-${{ hashFiles('cmake/external_grantlee.cmake') }}
      - name: Cache External Rapidcsv
        id: cache-external-rapidcsv
        uses: actions/cache@v2
        with:
          path: |
            build/external-prefix/src/external_rapidcsv
            build/external-prefix/src/external_rapidcsv-build
            build/external-prefix/src/external_rapidcsv-stamp
          key: ${{ runner.os }}-external-rapidcsv-${{ hashFiles('cmake/external_rapidcsv.cmake') }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          setup-python: '${{ !steps.cache-qt.outputs.cache-hit }}'
          install-deps: '${{ !steps.cache-qt.outputs.cache-hit }}'
      - name: Install packages required for testing
        if: ${{ matrix.apt_packages }}
        run: |
          sudo apt-get -y install ${{ matrix.apt_packages }}
      - name: scan-build CMake Setup
        run: |
          scan-build cmake -S . -B build
      - name: scan-build Compile 
        run: |
          scan-build cmake --build build
